createdAt: "2019-06-29T11:44:56.282Z"
updatedAt: "2019-06-30T11:23:20.653Z"
type: "MARKDOWN_NOTE"
folder: "b79b757a3f246f39516b"
title: "2-1. オブジェクトとは"
tags: []
content: '''
  # 2-1. オブジェクトとは
  
  ## オブジェクト
  
  JavaScript におけるオブジェクトは名前をキーにアクセスできる連想配列であるが、概念的には少し異なる。
  
  - 連想配列 - 複数の要素の集合体で、個々の要素が主体
  - オブジェクト - 1つのものを表現するために複数の属性値をもち、モノ全体が主体
  
  オブジェクトはモノの状態を表すプロパティと、モノを操作するメソッドから成る。
  
  ## `new`演算子
  
  オブジェクト指向の世界では、一部の例外を除いてもともとあるオブジェクトを操作することはタブー。
  もし同じオブジェクトを異なる箇所から操作しようとすると、データが競合し、不整合が発生してしまう。
  
  - インスタンス - オリジナルのオブジェクトのコピーであり、それ自体がデータを保持する。
  - コンストラクター - オブジェクトを初期化するオブジェクトと同名のメソッド。
  
  ```js
  let x = new オブジェクト名([引数...]);
  console.log(x.プロパティ名);
  ```
  
  生成したインスタンスはインスタンス変数（オブジェクト変数）に格納され、ドット演算子`.`やブランケット構文`[]`でプロパティやメソッドを呼ぶ。
  
  - 静的プロパティ/静的メソッド - インスタンスを生成せずに、オブジェクトから直接呼び出すプロパティ/メソッド
  
  ## 組み込みオブジェクト
  
  - JavaScript
    - 組み込みオブジェクト
      - Global
      - **Object**
      - **Array**
      - Map / WeakMap
      - Set / WeakSet
      - **String**
      - **Boolean**
      - **Number**
      - **Function**
      - **Symbol**
      - Math
      - Date
      - RegExp
      - Error / XxxxxError
      - Proxy
      - Promise
      - etc...
    - ブラウザオブジェクト
      - Window
      - Navigator
      - Location
      - History
      - etc...
    - DOMオブジェクト
    
  太文字の基本データ型では、リテラルをそのまま対応する組み込みオブジェクトとして扱うことができるので、インスタンス化をほとんど意識する必要はない。
  
  ```js
  let str = "Hello!"
  console.log(str.length);  // => 6
  ```
  
  基本データ型では`new`演算子を使ってオブジェクトを生成するのは避ける。
  例えば、JavaScript では`null`以外のオブジェクトを`true`とみなすので、以下の挙動が起こる。
  
  ```js
  let flag = new Boolean(false);
  if (flag) {
    console.log("flagはtrueだよ!");  // => flagはtrueだよ!
  }
  ```
  
  - ラッパーオブジェクト - 文字列、数値、論理値を扱うオブジェクトで、値を包み込んで、値を操作するメソッドを付与する役割をもったオブジェクト。
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
