createdAt: "2019-07-08T14:08:01.104Z"
updatedAt: "2019-07-15T12:25:34.960Z"
type: "MARKDOWN_NOTE"
folder: "660920097553891f8089"
title: "2. Containers"
tags: []
content: '''
  # 2. Containers
  
  ## はじめに
  
  - スタック
  - サービス
  - コンテナ ← 今ココ
  
  ## Docker を使うと何がいいか
  
  例えば Python のアプリケーションを作成する際、Docker を使うと、Python の実行環境をイメージとして持ってきたり、ビルドすることができる。
  このポータブルなイメージは`Dockerfile`によって定義される。
  
  ## Dockerfile
  
  `Dockerfile`はコンテナ内で必要なパッケージやアプリ、各種設定を含んだ環境を定義することができる。
  ネットワークインターフェースやディスクドライブのようなリソースが他の環境から隔離された環境内に仮想化されているため、このようなリソースにアクセスするにはポートを外の世界にマッピングする必要がある。また、環境内にコピーしたいファイルを指定する必要がある。
  しかし、一度`Dockerfile`を書いてしまえば、実行環境によらず全く同じ動作をする。
  
  ```ini:Dockerfile
  # 元となるイメージとして公式の Python ランタイムを使用する
  FROM python:2.7-slim
  
  # 作業ディレクトリを /app に設定する
  WORKDIR /app
  
  # 現在のディレクトリ内のコンテンツを /app 内に作成したコンテナにコピーする
  COPY . /app
  
  # requrements.txt で指定された必要なパッケージをすべてインストールする
  RUN pip install --trusted-host pypi.python.org -r requirements.txt
  
  # 80番ポートを外の世界に開放する
  EXPOSE 80
  
  # 環境変数を定義する
  ENV NAME World
  
  # コンテナを起動したとき app.py を実行する
  CMD ["python", "app.py"]
  ```
  
  ## アプリ自身
  
  `Dockerfile`と同じ階層に`requrements.txt`と`app.py`を作成する。`Dockerfile`でイメージがビルドされると`Dockerfile
  `内の`COPY`コマンドでこれらのファイルをイメージに組み込むことができる。
  また、`Dockerfile`内の`EXPOSE`コマンドによって、`app.py`の出力結果にHTTPを通じてアクセスすることができる。
  
  ```text:requirements.txt
  Flask
  Redis
  ```
  
  ```python:app.py
  from flask import Flask
  from redis import Redis, RedisError
  import os
  import socket
  
  # Connect to Redis
  redis = Redis(host="redis", db=0, socket_connect_timeout=2,socket_timeout=2)
  app = Flask(__name__)
  
  @app.route("/")
  def hello():
    try:
      visits = redis.incr("counter")
    except RedisError:
      visits = <i>cannot connect to Redis, counter disabled</i>
      
    html = "<h3>Hello {name}!</h3>" \\
    "<b>Hostname:</b> {hostname}<br/>" \\
    "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)
    
  if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)
  ```
  
  ## アプリをビルドする
  
  ```bash
  $ ls
  Dockerfile    app.py    requirements.txt
  $ docker build . --tag=friendhello
  $ docker image ls
  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
  friendlyhello       latest              cb03f761348e        4 minites ago          131MB
  ```
  
  - `-t`, `-tag==`- タグの名前を指定
  
  ## アプリを実行する
  
  AWS の EC2 インスタンス上で Docker を動かしている場合は、VPC のセキュリティグループを設定する必要がある。
  該当インスタンスのセクリティグループのインバウンドのルールに、
  
  - タイプ - カスタムTCP
  - プロトコル - TCP
  - ポート範囲 - 4000
  - ソース - マイIP
  
  としてインスタンスへの入力を許可するルールを設定する。
  
  ```bash
  $ docker run -p 4000:80 friendlyhello
   * Serving Flask app "app" (lazy loading)
   * Environment: production
     WARNING: This is a development server. Do not use it in a production deployment.
     Use a production WSGI server instead.
   * Debug mode: off
   * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)
  
  $ docker run -dp 4000:80 friendlyhello  # バックグラウンドで起動
  09fce53b442f41d7c70b2c934a8dfe4c42a8f4136dc9cd06f4b8206602dcdaf6
  $ docker container ls
  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
  09fce53b442f        friendlyhello       "python app.py"     29 seconds ago      Up 27 seconds       0.0.0.0:4000->80/tcp   pedantic_chebyshev
  $ docker container stop 09fc  # docker stop 09fcでもよい
  09fc
  ```
  
  - `-p` - 外部からアクセスされるポート番号:コンテナ側のポート番号にポートフォワードしている。
  - `-d` - コンテナをバックグラウンドで起動 (detached mode)
    - 終了する場合は`docker stop [コンテナID]`
  - `it` - コンソールに結果を出力。
    - `-i` - STDOUT にアタッチして開きっぱなしにしてくれる。
    - `-t` - 疑似ターミナル (pseudo-TTY) を割り当てる。
  
  `http://0.0.0.0:80`にアクセスしろとメッセージが出るが、これはコンテナ内部からのメッセージで、コンテナ内部からはコンテナ内の80番ポートを4000番ポートにマッピングしていることはわからない。
  ポート番号に`4000`を指定するとレスポンスが返ってくる。
  
  ### AWS のEC2インスタンス上で動かす場合
  
  EC2 のセキュリティグループから該当するEC2インスタンスのグループを選択し、インバウンドのタブから以下のルールを作成する。
  
  - タイプ - カスタムTCP
  - プロトコル - TCP
  - ポート範囲 - 4000
  - ソース - マイIP (自分の Wifi とかのIPアドレス？)
  
  ```bash
  # EC2インスタンスに割り当てられたグローバルIPアドレス
  $ curl -s ifconfig.me
  54.242.245.221
  $ curl -s http://169.254.169.254/latest/meta-data/public-ipv4
  54.242.245.221
  ```
  
  上記の例では、`[マイIP:80]`から`54.242.245.221:4000`へのアクセスを許可している。
  
  ### 仮想環境上で動かす場合
  
  ```bash:ゲストマシン
  $ ifconfig
  enp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
          inet 192.168.56.11  netmask 255.255.255.0  broadcast 192.168.56.255
          inet6 fe80::a00:27ff:fe03:312a  prefixlen 64  scopeid 0x20<link>
          ether 08:00:27:03:31:2a  txqueuelen 1000  (Ethernet)
          RX packets 15772  bytes 3949897 (3.7 MiB)
          RX errors 0  dropped 0  overruns 0  frame 0
          TX packets 17020  bytes 7344746 (7.0 MiB)
          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
  ```
  
  `[マイIP:80]`から`192.168.56.11:4000`へのアクセスを許可している。
  
  
'''
linesHighlighted: [
  162
]
isStarred: false
isTrashed: false
