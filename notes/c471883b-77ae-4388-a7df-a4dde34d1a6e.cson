createdAt: "2019-05-06T14:54:51.691Z"
updatedAt: "2019-05-07T11:39:30.933Z"
type: "MARKDOWN_NOTE"
folder: "b79b757a3f246f39516b"
title: "JavaScript 1"
tags: [
  "JavaScript"
]
content: '''
  ### JavaScript 1
  
  #### スクリプトを読み込む位置
  基本は`</body>`の直前に`<script></script>`
  関数定義を先に読み出したり、スクリプトからスタイルシートを出力したい場合は`<head>`要素配下。
  レイアウトとスクリプトは分離する。
  
  #### IE用
  `<noscript></noscript>`
  
  #### 疑似プロトコル
  ```html
  <a href="JavaScript: window.alert('Hello!');">ダイアログを表示</a>
  ```
  
  ### 変数
  ```js
  let x, y
  ```
  のように書ける。
  #### 命名規則
  - 一文字目は 英字, "_", $
  - 二文字目以降は 一文字目のやつ + 数字
  - 大文字 小文字
  - 予約語でない
  #### 記法
  - キャメルケース - lastName
  - パスカルケース - LastName
  - スネークケース - last_name
  #### 使い分け
  - 変数 - hogeHoge
  - クラス - HogeHoge
  - 定数 - HOGE_HOGE
  - 頻繁に呼び出すやつ - $hoge
  #### let
  - 重複NG(宣言は一度のみ)
  - ブロックスコープ
  #### const
  - let + 再代入不可
  
  ### 基本型
  値そのものが直接格納
  - number
  - string - `""`, `''`, `"abc"`, `'1'`
  - boolean - `true`, `false`
  - symbol
  - null
  - undefined
  
  ### 参照型
  値を参照しているメモリ上のアドレス(参照値)を格納
  - 配列 - `[]`, `[1, 2, 3]`
  - オブジェクト - `{ key: value }`
  - 関数 - `function() {}`, `() => {}`
  
  ### リテラル
  データ型に格納できる値そのもの、または値の表現方法
  - 数値リテラル(number)
  - 整数リテラル
  - 10進数リテラル
  - 16進数リテラル(hexadecimal) - 0xFFffFF
  - 8進数リテラル(octal) - 0o677
  -  2進数リテラル(binary) - 0b01001
  -  浮動小数点リテラル - 1.5, 3.14e5, 1.08e-8
  - 文字列リテラル - "`abc`", `"abc"`
  - エスケープシーケンス
    - `\\b` - バックスペース
    - `\\f` - 改ページ
    - `\\n` - 改行(LF)
    - `\\r` - キャリッジリターン(CR)
    - `\\t` - タブ
    - `\\\\`
    - `\\'`
    - `\\"`
    - `\\xXX` - Latin-1 文字(XX は16進数で以下同様)
    - `\\uXXXX` - Unicode 文字
    - `\\u{XXXXX}` - 0xffff(4桁の16進数) を超える Unicode 文字
    
  #### テンプレート文字列
  改行や変数をそのまま書ける
  ```js
  const name = "nokazn";
  console.log(`Hello ${name}!`);
  ```
  
  #### 配列リテラル
  ```js
  const list = [1, 2, 3];
  console.log(list[1]);
  // => 2
  ```
  #### オブジェクトリテラル(ハッシュ、連想配列)
  ```js
  const obj = {
    x: 1,
    method: function() {
      console.log("this is a method");
    }
  }
  ```
  ドット演算子、ブランケット構文でアクセスできる。
  
  #### undefined
  - 宣言済みだが値がない。未宣言のときは`"a is not defined"`と言われる
  - 未定義のプロパティ
  - 関数で値が return されなかった
  
  ### 演算子
  オペランド(変数、リテラルなど)に対してあらかじめ決められた処理を行う記号
  #### 算術演算子
  `+`, `-`, `*`, `/`, `%`, `++`, `--`
  `++`, `--`は前置と後置が可能
  
  #### 加算演算子 `+`
  ```js
  console.log(10 + 1);
  // => 11
  console.log("10" + 1);
  console.log(10 + "1");
  // => 101```
  
  #### 丸め誤差
  ```js
  console.log(0.2 * 3);
  // => 0.6000000000000001
  console.log(9999999999999999);
  // => 10000000000000000
  ```
  #### 有効数字2桁で計算
  ```js
  console.log(((0.2351 * 100) / 3) * 100);
  // => 0.7836666666666667
  console.log(0.2351 / 3);
  // => 0.08436666666666666
  ```
  ### 代入演算子
  - `=`
  - `+=`, `-=`, `*=`, `/=`, `%=`
  - 論理積演算 `&=` - ビットごとの論理積の結果を代入
  - 論理和演算 `|=` - ビットごとの論理和の結果を代入
  - 排他的論理和演算 `^=` - ビットごとの排他的論理和の結果を代入
  - 左シフト `<<=`
  - 右シフト `>>=`, `>>>=`
  
  ### false とみなせる値
  - 0
  - -0
  - null
  - false
  - NaN
  - undefined
  - 空文字列 ("")
      
      
'''
linesHighlighted: []
isStarred: false
isTrashed: false
