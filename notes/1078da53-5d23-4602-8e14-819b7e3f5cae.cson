createdAt: "2019-05-09T13:09:42.508Z"
updatedAt: "2019-05-09T13:10:02.671Z"
type: "MARKDOWN_NOTE"
folder: "d41de58f2f8776076b18"
title: "bundle installしたgemが混ざるのが気持ち悪い話"
tags: []
content: '''
  ## bundle installしたgemが混ざるのが気持ち悪い話
  
  
  はじめにbundlerとは，Rubyの外部ライブラリーのパッケージ形式であるgemを管理をしてくれるライブラリである。これがデフォルトではシステム自体にgemをインストールしてしまうという話。bundle installされたgemはどこへ？新しいrailsのプロジェクトを始める際，ふと気になったので調べてみた。gem environmentコマンドを打つとRubyGemsに関する情報が色々出てくる。引数としてgemdirを渡すとgemのインストール先のパスが表示される。$ gem environment gemdir=> /home/vagrant/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0当方はrbenvを使用していて，rbenvで管理されているRubyのバージョン毎にフォルダが割り当てられており，デフォルトではその時に選択していたRubyのバージョンのフォルダに格納されるみたい。(2.5.1フォルダの下に2.5.0フォルダがあるのが謎だがとりあえず問題なさそうなのでスルー･･･)なので，同じバージョンのRubyで開発したプロジェクトではgemが混ざってしまわないよう慣習的にプロジェクトファイル下のvendor/bundleの場所を指定することが多いらしい。グローバルなgemをvendor/bundle下にインストールし直すグローバルのgemを一括で削除したいが，デフォルトのものとMySQL，bundlerは残しておきたいのでそれらは除外。$ gem list | grep -v "default:\\|bundler\\|mysql2" | xargs gem uninstall -aIxアンインストールのオプションはそれぞれ，
  	* -a : すべてのファイル
  	* -I : 依存関係を無視
  	* -x : 実行ファイルも削除
  
  ということです。その後，プロジェクトフォルダの下にインストール。$ bundle install --path vendor/bundleこれでgemが混ざらなくて済む。これでこのプロジェクト内ではオプションをつけなくてもvendor/bundleにインストールされる。プロジェクトフォルダにてbundle listすればbundlerでインストールしたgemの一覧を確認できる。ついでに，他の新規プロジェクトを立ち上げた際にオプションを指定せずに済むようにしておく。$ bundle config --global path vendor/bundleすると，/home/vagrant/.bundle/configに以下のデフォルト値が追加される。BUNDLE_PATH: "vendor/bundle"これで次回以降bundle installとしてもプロジェクトフォルダ下にgemがインストールされる。さいごにbundlerは適切なバージョンのgemを上手いこと読み込んでくれるのでプロジェクト毎に分ける必要はないんだろうけど，何かやっぱり感覚的に気持ち悪い。参考Gem パッケージのインストール先を調べる | まくまく Ruby ノートCommand Reference - RubyGems GuidesBundler概要
  Measure
  Measure
'''
linesHighlighted: []
isStarred: false
isTrashed: false
