createdAt: "2019-08-21T05:53:33.804Z"
updatedAt: "2019-08-21T05:55:33.130Z"
type: "MARKDOWN_NOTE"
folder: "8eecd56ec7357d6ca8d6"
title: "Vuex - 2. state / getters"
tags: [
  "Vuex"
]
content: '''
  # Vuex - 2. state / getters
  
  ## state
  
  Vuex では単一ステートツリーが用いられており、アプリケーションごとに1つのストアしか持たない。
  
  ```js:ストア
  const store = new Vuex.Store({
    state: {
      count: 0
    }
  })
  ```
  
  ```js
  const Counter = {
    template: `<div>{{ counter }}</div>`,
    computed: {
      count () {
        return this.$store.state.count
      }
    }
  }
  ```
  
  ### mapState ヘルパー
  
  ```js:子コンポーネント
  import { mapState } from 'vuex'
  
  export default {
    computed: mapState({
      count: state => state.count,    // 同じ名前を割り当てる - (1)
      countAlias: 'count',            // 違う名前を割り当てる
      countPlusLocalCount (state) {
        return state.count + this.localCount
      }
    })
  }
  ```
  
  (1) のように同じ名前を割り当てるときは配列で渡すこともできる。
  
  ```js:子コンポーネント
    computed: mapState([
      'count'  // 同じ名前を割り当てる ((1)と同義)
    ])
  ```
  
  `mapState`は複数の算出プロパティを要素として持つオブジェクトであるので、子コンポーネント内のローカル算出プロパティとマージさせるためにはスプレッド演算子を用いる。
  
  ```js:子コンポーネント
  computed: {
    myNum () {
      return this.num % 2
    },
    ...mapState({
      // ...
    })
  }
  ```
  
  `computed`内で`mapState`内のオブジェクトが展開されるイメージ。
  
  ## getters
  
  ストアの算出プロパティのようなもので、ゲッターと依存関係にある値が変更されたとき再評価される。
  
  第一引数として`state`、第二引数として他のゲッターを受け取る。
  
  ```js:ストア
  const store = new Vuex.Store({
    state: {
      tasks: [
        { id: 1, task: 'task1', done: true },
        { id: 2, task: 'task2', done: false }
      ]
    },
    getters: {
      doneTasks (state) {
        return state.tasks.filter(todo => todo.done)
      },
      doneTasksCount (state, getters) {
        return getters.doneTasks.length
      }
    }
  })
  ```
  
  ```js:子コンポーネント
  computed: {
    doneTasksCount () {
      return this.$store.getters.doneTasksCount
    }
  }
  ```
  
  Vue のリアクティブシステムの一部としてキャッシュされる。
  
  ### ゲッターに引数を渡す
  
  関数リテラルを返り値にすることで、ゲッターに引数を渡すことができる。
  
  ```js:ストア
  getters: {  
    getTaskById: (state) => (id) => {
      return state.tasks.find(task => task.id === id)
    }
  }
  ```
  
  ```js:子コンポーネント
  this.$store.getters.getTasksById(2)
  ```
  
  メソッドにより呼ばれるゲッターはその度に実行され、キャッシュされない。
  
  ### mapGetters ヘルパー
  
  ```js
  import { mapGetters } from 'vuex'
  
  export default {
    computed: {
      ...mapGetters([
        'doneTasks',
        'doneTasksCount'  // 同じ名前を割り当てる
      ])
    }
  }
  ```
  
  ```js
  ...mapGetters({
    doneCount: 'doneTasksCoun'  // 違う名前を割り当てる
  })
  ```
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
